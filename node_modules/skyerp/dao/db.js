var mongoose = require( 'mongoose' );
var Deferred = require( 'JQDeferred' );

require( "skyerp/utils/inherits.js" );
var logger = require( 'skyerp/debug/logger.js' );
var config = require( 'skyerp/conf/conf.js' );
var markdown = require( "skyerp/utils/markdown_helper" );

/**
 * @class skyerp.Db
 * @extends Object
 *
 * Accès à la base de données mongoDB
 *
 */
var Db = Object.subClass( {
    /**
     * Constructeur
     */
    init: function ( ) {
        this.schemas = {};
        this.models = {};
        this.enums = {};

        mongoose.connection.on( 'error', function ( error ) {
            logger.error( error );
        } );

        mongoose.connection.once( 'open', function callback( ) {
            // yay!
            logger.info( 'Connexion à <%s>', config.db.uri );
        } );
    },

    /**
     * Connexion à la base de données
     */
    connect: function ( ) {
        logger.info( 'Connexion à la db en cours ...' );
        mongoose.connect( config.db.uri );
    },

    /**
     * Fermeture de la base de données
     */
    close: function ( ) {
        logger.info( 'Déconnexion à la db' );
        mongoose.connection.close( );
    },

    /**
     * Configuration de la base de données
     * Création du schéma / index / modèles
     */
    setup: function ( ) {
        logger.debug( 'Configuration de la db' );

        // Produits
        this.schemas.product = new mongoose.Schema( {
            index: {
                type: Number
            },
            code: String,
            title: String,
            description: String,
            added_date:{
                    type: Date,
                    default:Date.now
            },
            manufacture_details:{
                model_number:String,
                release_date:{
                    type: Date
                }
            },
            shipping_details:{
                weight:Number,
                width:Number,
                height:Number,
                depth:Number
            },
            quantity:Number,
            pricing:{
                price:Number
            },
            promotions:{
                promo_code:String,
                promo_percent:Number
            }
        } );
        
        //Customer
        this.schemas.customer = new mongoose.Schema({
            index:{
                    type: Number
            },
            customer:{
                first_name:String,
                last_name:String,
                addresses:[{
                    street:String,
                    city:String
                }]
            }
        });
        //Categorie
        this.schemas.categorie = new mongoose.Schema({
            index:{
                    type: Number
            },
            title:String,
            parent:String,
            path:String
        });
        //Index
        this.schemas.product.set('autoIndex',false);
        this.schemas.customer.set('autoIndex',false);
        this.schemas.categorie.set('autoIndex',false);

        this.schemas.product.options.toObject = this.schemas.product.options.toObject || {};
        this.schemas.customer.options.toObject = this.schemas.customer.options.toObject || {};
        this.schemas.categorie.options.toObject = this.schemas.categorie.options.toObject || {};

        //Schema level
        var transformFct=function(ret)
        {
            delete ret.__v;
        };
        this.schemas.product.options.toObject.transform = function (doc,ret,options){
            transformFct(ret);
        };// remove the _id of every document before returning the result
        
        //Modèles
        this.models.customer = mongoose.model('customer',this.schemas.customer);
        this.models.product = mongoose.model('product',this.schemas.product);
        this.models.categories = mongoose.model('categorie',this.schemas.categorie);

    },
    /* PRODUCTS */
    insertDemoProduct: function () {
        logger.debug("Insertion du produit de demo");
        var json = require("skyerp/samples/product.json");
        logger.debug(json);
        return this.insertProduct(json);
    },
    insertProduct:function(data){
        var dfd = Deferred();
        var that = this;

        var model;

        var saveFct = (function(model)
        {
            var deferred = Deferred();
            //save
            var callback = function(err,item,affected){
                if(err){
                    deferred.reject(err);
                }
                else{
                    deferred.resolve(item);
                }
            };
            model.save(callback);
            return deferred.promise();
        });

        var actions = [];
        logger.debug("parsing");

        model = new that.models.product({
            index: data.index,
            code:data.code,
            title:data.title,
            description:data.description,
            manufacture_details:data.manufacture_details,
            shipping_details:data.shipping_details,
            quantity:data.quantity,
            pricing:data.pricing,
            promotions:data.promotions
        });

        actions.push(saveFct(model));

        var res = {};
        res.title=model.title;

        Deferred.when.apply(this,actions).done(function(){
            dfd.resolve(res);
        }).fail(function (err){
            dfd.reject(err);
        });
        logger.debug("Insertion d'un produit <%s>",JSON.stringify(data));
        //result={"mess":"toto"};
        //dfd.resolve( markdown.parse( result ) );
        return dfd.promise();
    },
    /**
     * Consultation d'un produit
     *
     * @param {String} consultId.
     * @return {Deferred.promise}.
     */
    consultProduct:function(productid){
        var dfd = Deferred();
        var that = this;

        var pid = productid;
        var query = this.models.product.findOne({
            code: pid
        }).exec(function(err,product){
                if ( err ) {
                    logger.error( err );
                    dfd.reject( err );
                }
                else if ( !product ) {
                    dfd.reject( 404 );
                }
                else{
                    logger.debug("Product trouvé");
                    logger.debug(product);
                    dfd.resolve(product);
                }
            });

        return dfd.promise( );

    },

    /* CUSTOMER */

    insertDemoCustomer: function () {
        logger.debug("Insertion du produit de demo");
        var json = require("skyerp/samples/customer.json");
        logger.debug(json);
        return this.insertCustomer(json);
    },
    insertCustomer:function(data){
        var dfd = Deferred();
        var that = this;

        var model;

        var saveFct = (function(model)
        {
            var deferred = Deferred();
            //save
            var callback = function(err,item,affected){
                if(err){
                    deferred.reject(err);
                }
                else{
                    deferred.resolve(item);
                }
            };
            model.save(callback);
            return deferred.promise();
        });

        var actions = [];
        logger.debug("parsing");

        model = new that.models.customer({
            index: data.index,
            customer:data.customer
        });

        actions.push(saveFct(model));

        var res = {};
        res.title=model.title;

        Deferred.when.apply(this,actions).done(function(){
            dfd.resolve(res);
        }).fail(function (err){
            dfd.reject(err);
        });
        logger.debug("Insertion d'un client <%s>",JSON.stringify(data));
        //result={"mess":"toto"};
        //dfd.resolve( markdown.parse( result ) );
        return dfd.promise();
    },
    consultCustomer:function(cid){
        var dfd = Deferred();
        var that = this;

        var id = mongoose.Types.ObjectId.fromString(cid);
        logger.debug('id=%s',id);
        var query = this.models.customer.findOne({
            _id: id
        }).exec(function(err,customer){
                if ( err ) {
                    logger.error( err );
                    dfd.reject( err );
                }
                else if ( !customer ) {
                    dfd.reject( 404 );
                }
                else{
                    logger.debug("customer trouvé");
                    logger.debug(customer);
                    dfd.resolve(customer);
                }
            });

        return dfd.promise( );

    },
     /* Categories */

    insertDemoCategorie: function () {
        logger.debug("Insertion du produit de demo");
        var json = require("skyerp/samples/categories.json");
        logger.debug(json);
        return this.insertCategorie(json);
    },
    insertCategorie:function(data){
        var dfd = Deferred();
        var that = this;

        var model;

        var saveFct = (function(model)
        {
            var deferred = Deferred();
            //save
            var callback = function(err,item,affected){
                if(err){
                    deferred.reject(err);
                }
                else{
                    deferred.resolve(item);
                }
            };
            model.save(callback);
            return deferred.promise();
        });

        var actions = [];
        logger.debug("parsing");

        model = new that.models.categories({
            index: data.index,
            title:data.title,
            parent:data.parent,
            path:data.path
        });

        actions.push(saveFct(model));

        var res = {};
        res.title=model.title;

        Deferred.when.apply(this,actions).done(function(){
            dfd.resolve(res);
        }).fail(function (err){
            dfd.reject(err);
        });
        logger.debug("Insertion d'une Categories<%s>",JSON.stringify(data));
        //result={"mess":"toto"};
        //dfd.resolve( markdown.parse( result ) );
        return dfd.promise();
    },
    consultCategorie:function(cid){
        var dfd = Deferred();
        var that = this;

        var id = mongoose.Types.ObjectId.fromString(cid);
        logger.debug('id=%s',id);
        var query = this.models.categories.findOne({
            _id: id
        }).exec(function(err,categories){
                if ( err ) {
                    logger.error( err );
                    dfd.reject( err );
                }
                else if ( !categories ) {
                    dfd.reject( 404 );
                }
                else{
                    logger.debug("categories trouvé");
                    logger.debug(categories);
                    dfd.resolve(categories);
                }
            });

        return dfd.promise( );

    }

} );

// Export du module
module.exports = new Db( );